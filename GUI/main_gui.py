# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import struct
import serial
import serial.tools.list_ports
import csv
from pyqtgraph import PlotWidget

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(598, 468)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.comboBox_ports = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_ports.setObjectName("comboBox_ports")
        self.verticalLayout.addWidget(self.comboBox_ports)
        self.pushButton_connect = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_connect.setObjectName("pushButton_connect")
        self.verticalLayout.addWidget(self.pushButton_connect)
        self.pushButton_disconnect = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_disconnect.setObjectName("pushButton_disconnect")
        self.verticalLayout.addWidget(self.pushButton_disconnect)
        self.pushButton_startRecording = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_startRecording.setObjectName("pushButton_startRecording")
        self.verticalLayout.addWidget(self.pushButton_startRecording)
        self.pushButton_stop_save_recording = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_stop_save_recording.setObjectName("pushButton_stop_save_recording")
        self.verticalLayout.addWidget(self.pushButton_stop_save_recording)
        self.widget = PlotWidget(self.centralwidget)
        self.widget.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.widget.setObjectName("widget")
        self.verticalLayout.addWidget(self.widget)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 1)
        self.verticalLayout.setStretch(2, 1)
        self.verticalLayout.setStretch(3, 1)
        self.verticalLayout.setStretch(4, 1)
        self.verticalLayout.setStretch(5, 8)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_connect.setText(_translate("MainWindow", "Conectar"))
        self.pushButton_disconnect.setText(_translate("MainWindow", "Desconectar"))
        self.pushButton_startRecording.setText(_translate("MainWindow", "Comenzar grabaci칩n"))
        self.pushButton_stop_save_recording.setText(_translate("MainWindow", "Detener grabaci칩n y guardar"))


SAVE_PATH = "C:/Users/Tassara/Documents/Facultad/PSIB - LabECG/ecg_data.csv"  # <-- Ac치 cambi치s el path y el nombre del archivo
class ECGRecorder(QtCore.QObject):
    def __init__(self, ui):
        super().__init__()
        self.ui = ui
        self.serial = None
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.read_serial)
        self.data = []
        self.plot_data = []
        self.curve = self.ui.widget.plot(pen='g')
        self.ui.widget.setYRange(0, 5)
        #self.ui.widget.setYRange(0, 1024, padding=0)

    def list_ports(self):
        self.ui.comboBox_ports.clear()
        ports = serial.tools.list_ports.comports()
        for port in ports:
            self.ui.comboBox_ports.addItem(port.device)

    def connect_serial(self):
        port_name = self.ui.comboBox_ports.currentText()
        if not port_name:
            return
        try:
            self.serial = serial.Serial(port_name, baudrate=9600, timeout=1)
            print("Conectado excitosamente")
            self.ui.pushButton_connect.setStyleSheet("background-color: green;")
            self.ui.pushButton_connect.setEnabled(False)
        except serial.SerialException as e:
            print(f"Error al conectar: {e}")
            return

    def disconnect_serial(self):
        self.timer.stop()
        if self.serial and self.serial.is_open:
            self.serial.close()
            self.serial = None
            self.ui.pushButton_connect.setStyleSheet("")
            self.ui.pushButton_connect.setEnabled(True)

    def start_recording(self):
        self.data = []
        self.plot_data = []
        self.timer.start(10)  # Llamar a read_serial cada 10 ms

    def stop_and_save(self):
        self.timer.stop()
        if self.data:
            with open(SAVE_PATH, "w", newline='') as f:
                writer = csv.writer(f)
                writer.writerow(["Sample"])
                for sample in self.data:
                    writer.writerow([sample])
        print(f"Datos guardados en {SAVE_PATH}")

    def read_serial(self):
        if not self.serial:
            return

        try:
            self.serial.write(b'S')  # Handshake

            # Esperar hasta tener 200 bytes
            expected_bytes = 2 * 100
            if self.serial.in_waiting < expected_bytes:
                return

            raw = self.serial.read(expected_bytes)  # Leer exactamente 200 bytes
            samples = struct.unpack('<' + 'H' * 100, raw)  # 100 valores uint16

            # Convertir a voltaje
            voltages = [round(s * (5.0 / 1023.0), 2) for s in samples]

            self.data.extend(voltages)
            self.plot_data.extend(voltages)
            self.plot_data = self.plot_data[-3000:]
            self.curve.setData(self.plot_data)

        except Exception as e:
            print(f"Error leyendo datos: {e}")

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    recorder = ECGRecorder(ui)
    recorder.list_ports()

    ui.pushButton_connect.clicked.connect(recorder.connect_serial)
    ui.pushButton_disconnect.clicked.connect(recorder.disconnect_serial)
    ui.pushButton_startRecording.clicked.connect(recorder.start_recording)
    ui.pushButton_stop_save_recording.clicked.connect(recorder.stop_and_save)

    MainWindow.show()
    sys.exit(app.exec_())
